!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=13)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.resetStorageKeys=function(){}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.decrementCount=function(){if(null!==localStorage.getItem("count")){var e=localStorage.getItem("count"),t=parseInt(e);if(!(t>0))return!1;t--,localStorage.setItem("count",t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.showEditModal=function(e,t,n){var r=document.getElementById(e),o=document.getElementById("add-modal"),a=document.getElementById("save-contact");document.getElementsByClassName("modal-card-title")[0].textContent="Edit Contact",o.classList.add("open"),a.id="edit",a.setAttribute("data-primary",n),[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(r)).map(function(e){switch(e.id){case"first-name":e.value=t.firstName;break;case"last-name":e.value=t.lastName;break;case"phone":e.value=t.phone;break;case"address":e.value=t.address}})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.setId=function(){var e=localStorage.getItem("count"),t=void 0;t=null==e||"null"==e?0:parseInt(e),t++,localStorage.setItem("count",t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.renderView=function(e,t){var n=document.getElementById(e);n.innerHTML="",t.map(function(e,t){var r=void 0;if("{"!=e[0])return!1;(r=JSON.parse(e)).id=""+(t+1),n.innerHTML+='<li data-json="'+JSON.stringify(r)+'" data-group='+(t+1)+'  class="list-item">\n              <a data-key='+(t+1)+' class="panel-block">'+(r.firstName?r.firstName:"N / A")+"</a>\n              <a data-key="+(t+1)+' class="panel-block">'+(r.lastName?r.lastName:"N / A")+"</a>\n              <a data-key="+(t+1)+' class="panel-block hidden">'+(r.phone?r.phone:"N / A")+"</a>\n              <a data-key="+(t+1)+' class="panel-block hidden">'+(r.address?r.address:"N / A")+'</a>\n              <div class="button-container">\n                <a data-key='+(t+1)+' id="edit-contact" class="panel-block edit-contact">edit</a>\n                <a data-key='+(t+1)+' id="delete-contact" class="panel-block delete-contact">delete</a>\n              </div>\n          </li> '})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateView=void 0;var r=n(4);t.updateView=function(e){return(0,r.renderView)("list",e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fetchData=void 0;var r=n(5);t.fetchData=function(){for(var e=[],t={},n=Object.keys(localStorage),o=n.length;o--;)t[n[o]]=localStorage.getItem(n[o]);Object.keys(t).forEach(function(n){var r=t[n];return e.push(r),e}),(0,r.updateView)(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(6),a=n(3),i=n(2),c=n(1);n(0);function s(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var l={},u={},d={},f=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),document.getElementById("add-contact").addEventListener("click",this.openLightbox),document.getElementById("close-btn").addEventListener("click",this.closeLightbox),document.getElementById("cancel").addEventListener("click",this.closeLightbox),document.getElementById("save-contact").addEventListener("click",this.saveContact)}return r(e,[{key:"init",value:function(){(0,o.fetchData)(),this.addListeners()}},{key:"addListeners",value:function(){var e=this,t=document.getElementsByClassName("edit-contact");[].concat(s(t)).map(function(t){return t.addEventListener("click",e.editContact)});var n=document.getElementsByClassName("delete-contact");[].concat(s(n)).map(function(t){return t.addEventListener("click",e.deleteContact)})}},{key:"openLightbox",value:function(){document.querySelector("#add-modal").classList.add("open")}},{key:"closeLightbox",value:function(){document.querySelector("#add-modal").classList.remove("open")}},{key:"saveContact",value:function(e){e.preventDefault();var t=document.getElementById("form").elements;if([].concat(s(t)).filter(function(e){return"button"!==e.className&&"button is-primary"!==e.className}).map(function(e,t){u=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},e.attributes.name.value,e.value),d=Object.assign(l,u)}),"edit"==this.id){var n=this.dataset.primary;window.localStorage.removeItem(n),window.localStorage.setItem(n,JSON.stringify(d))}else{(0,a.setId)();var r=window.localStorage.getItem("count");window.localStorage.setItem(r,JSON.stringify(d))}window.location.reload(!1)}},{key:"editContact",value:function(){var e=this.attributes[0].nodeValue,t=window.localStorage.getItem(e),n=JSON.parse(t);(0,i.showEditModal)("form",n,e)}},{key:"deleteContact",value:function(){var e=this.dataset.key;confirm("Are you sure you want to delete this contact ?")&&((0,c.decrementCount)(),window.localStorage.removeItem(e),window.location.reload(!0))}}]),e}();t.default=f},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){var r={},o=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),a=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),i=null,c=0,s=[],l=n(8);function u(e,t){for(var n=0;n<e.length;n++){var o=e[n],a=r[o.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](o.parts[i]);for(;i<o.parts.length;i++)a.parts.push(y(o.parts[i],t))}else{var c=[];for(i=0;i<o.parts.length;i++)c.push(y(o.parts[i],t));r[o.id]={id:o.id,refs:1,parts:c}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],c={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(c):n.push(r[i]={id:i,parts:[c]})}return n}function f(e,t){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=s[s.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),s.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function p(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=s.indexOf(e);t>=0&&s.splice(t,1)}function v(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),m(t,e.attrs),f(e,t),t}function m(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function y(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var s=c++;n=i||(i=v(t)),r=b.bind(null,n,s,!1),o=b.bind(null,n,s,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",m(t,e.attrs),f(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=l(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),c=e.href;e.href=URL.createObjectURL(i),c&&URL.revokeObjectURL(c)}.bind(null,n,t),o=function(){p(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){p(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return u(n,t),function(e){for(var o=[],a=0;a<n.length;a++){var i=n[a];(c=r[i.id]).refs--,o.push(c)}e&&u(d(e,t),t);for(a=0;a<o.length;a++){var c;if(0===(c=o[a]).refs){for(var s=0;s<c.parts.length;s++)c.parts[s]();delete r[c.id]}}}};var h=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function b(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=h(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},,function(e,t,n){},function(e,t,n){var r=n(11);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(9)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";n(12),(new(function(e){return e&&e.__esModule?e:{default:e}}(n(7)).default)).init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,